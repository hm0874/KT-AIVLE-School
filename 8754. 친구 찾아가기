from collections import deque

def bfs(N, heights):
    # 방문 여부 및 개구리 F가 조건 2를 무시한 상태를 저장할 배열 초기화
    # visited[x][y][0]: (x, y)에 조건 2를 무시하지 않고 도달한 경우
    # visited[x][y][1]: (x, y)에 조건 2를 무시하고 도달한 경우
    visited = [[[False, False] for _ in range(N)] for _ in range(N)]
    
    # BFS를 위한 큐 초기화, (x, y, condition_ignored, steps)
    # condition_ignored: 조건 2를 무시했으면 1, 아니면 0
    # steps: 거쳐온 칸의 개수
    queue = deque([(0, 0, 0, 1)])
    visited[0][0][0] = True

    # 상하좌우 이동을 위한 방향 벡터
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

    while queue:
        x, y, condition_ignored, steps = queue.popleft()

        # 목적지에 도달한 경우
        if x == N-1 and y == N-1:
            return steps

        for dx, dy in directions:
            nx, ny = x + dx, y + dy

            # 격자판 범위를 벗어나지 않는지 확인
            if 0 <= nx < N and 0 <= ny < N:
                # 높이가 낮거나 같고, 방문하지 않은 경우 이동
                if heights[nx][ny] <= heights[x][y] and not visited[nx][ny][condition_ignored]:
                    visited[nx][ny][condition_ignored] = True
                    queue.append((nx, ny, condition_ignored, steps + 1))
                # 높이가 더 높고, 조건 2를 아직 한 번도 무시하지 않은 경우 이동
                elif heights[nx][ny] > heights[x][y] and condition_ignored == 0 and not visited[nx][ny][1]:
                    visited[nx][ny][1] = True
                    queue.append((nx, ny, 1, steps + 1))

    # 목적지에 도달할 수 없는 경우
    return -1

# 입력 받기
N = int(input())
heights = [list(map(int, input().split())) for _ in range(N)]

# BFS 실행 및 결과 출력
print(bfs(N, heights))
