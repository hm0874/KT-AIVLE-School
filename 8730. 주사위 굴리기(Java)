import java.util.Scanner;

class Program {
    static int W, H;
    static int[][] plane;
    static int[] dice = new int[6]; // 동, 남, 서, 북, 위, 바닥
    static int x, y;
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        W = sc.nextInt();
        H = sc.nextInt();
        x = sc.nextInt();
        y = sc.nextInt();

        for (int i = 0; i < 6; i++) {
            dice[i] = sc.nextInt();
        }

        int N = sc.nextInt();
        int[] moves = new int[N];
        for (int i = 0; i < N; i++) {
            moves[i] = sc.nextInt();
        }

        plane = new int[H][W];
        plane[y][x] = dice[5]; // 주사위의 초기 바닥면 기록

        for (int move : moves) {
            rollDice(move);
            plane[y][x] = dice[5]; // 이동 후 바닥면 기록
        }

        printPlane();
    }

    static void rollDice(int direction) {
        int nx = x, ny = y;
        switch (direction) {
            case 1: // 동쪽
                nx = x + 1;
                break;
            case 2: // 남쪽
                ny = y + 1;
                break;
            case 3: // 서쪽
                nx = x - 1;
                break;
            case 4: // 북쪽
                ny = y - 1;
                break;
        }

        if (nx < 0 || nx >= W || ny < 0 || ny >= H) {
            // 평면을 벗어나는 경우, 주사위만 회전
            rotateDiceInPlace(direction);
        } else {
            // 평면 내에서 이동하는 경우, 위치 갱신 및 주사위 회전
            x = nx;
            y = ny;
            rotateDice(direction);
        }
    }

    static void rotateDice(int direction) {
        int[] newDice = dice.clone();
        switch (direction) {
            case 1: // 동쪽
                dice[0] = newDice[4];
                dice[2] = newDice[5];
                dice[4] = newDice[2];
                dice[5] = newDice[0];
                break;
            case 2: // 남쪽
                dice[1] = newDice[4];
                dice[3] = newDice[5];
                dice[4] = newDice[3];
                dice[5] = newDice[1];
                break;
            case 3: // 서쪽
                dice[0] = newDice[5];
                dice[2] = newDice[4];
                dice[4] = newDice[0];
                dice[5] = newDice[2];
                break;
            case 4: // 북쪽
                dice[1] = newDice[5];
                dice[3] = newDice[4];
                dice[4] = newDice[1];
                dice[5] = newDice[3];
                break;
        }
    }

    static void rotateDiceInPlace(int direction) {
        int[] newDice = dice.clone();
        switch (direction) {
            case 1: // 동쪽
                dice[0] = newDice[4];
                dice[2] = newDice[5];
                dice[4] = newDice[2];
                dice[5] = newDice[0];
                break;
            case 2: // 남쪽
                dice[1] = newDice[4];
                dice[3] = newDice[5];
                dice[4] = newDice[3];
                dice[5] = newDice[1];
                break;
            case 3: // 서쪽
                dice[0] = newDice[5];
                dice[2] = newDice[4];
                dice[4] = newDice[0];
                dice[5] = newDice[2];
                break;
            case 4: // 북쪽
                dice[1] = newDice[5];
                dice[3] = newDice[4];
                dice[4] = newDice[1];
                dice[5] = newDice[3];
                break;
        }
    }

    static void printPlane() {
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(plane[i][j] + " ");
            }
            System.out.println();
        }
    }
}
