import heapq
import sys

def dijkstra(n, graph, start):
    distances = {node: float('inf') for node in range(1, n+1)}
    distances[start] = 0
    priority_queue = [(0, start)]
    
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)
        
        if current_distance > distances[current_node]:
            continue
        
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
                
    return distances

def main():
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    N = int(data[index])
    index += 1
    M = int(data[index])
    index += 1
    
    graph = {i: {} for i in range(1, N+1)}
    
    for _ in range(M):
        U = int(data[index])
        V = int(data[index+1])
        T = int(data[index+2])
        index += 3
        if V in graph[U]:
            graph[U][V] = min(graph[U][V], T)
        else:
            graph[U][V] = T
        if U in graph[V]:
            graph[V][U] = min(graph[V][U], T)
        else:
            graph[V][U] = T
    
    S = int(data[index])
    E = int(data[index+1])
    
    distances = dijkstra(N, graph, S)
    print(distances[E])

if __name__ == "__main__":
    main()
