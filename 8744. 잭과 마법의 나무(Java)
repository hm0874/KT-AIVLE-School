import java.util.*;

class Program {
    static class State {
        int prev, current, day;

        State(int prev, int current, int day) {
            this.prev = prev;
            this.current = current;
            this.day = day;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        while (T-- > 0) {
            int N = scanner.nextInt();
            System.out.println(minDaysToReachN(N));
        }
        scanner.close();
    }

    private static int minDaysToReachN(int N) {
        if (N == 1) return 0; // 첫째 날 나무는 이미 키 1
        
        Queue<State> queue = new LinkedList<>();
        Set<List<Integer>> visited = new HashSet<>();
        queue.add(new State(1, 1, 0)); // 시작: 키 1에서 시작
        
        while (!queue.isEmpty()) {
            State state = queue.poll();
            int prevKey = state.current; // 다음 날의 그제 키는 현재의 어제 키
            int sunny = state.current + state.prev; // 맑음 경우
            int cloudy = Math.max(state.current - 1, 1); // 흐림 경우
            int stormy = (state.prev + state.current) / 2; // 폭풍우 경우

            List<Integer> nextDayKeys = Arrays.asList(sunny, cloudy, stormy);
            for (int nextKey : nextDayKeys) {
                if (nextKey == N) return state.day + 1; // 목표 키에 도달

                List<Integer> keyPair = Arrays.asList(prevKey, nextKey);
                if (!visited.contains(keyPair)) {
                    visited.add(keyPair);
                    queue.add(new State(prevKey, nextKey, state.day + 1));
                }
            }
        }

        return -1; // 이론상 발생할 수 없는 경로
    }
}
