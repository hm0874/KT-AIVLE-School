import heapq

def dijkstra(graph, start):
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    queue = []
    heapq.heappush(queue, [distances[start], start])

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if distances[current_node] < current_distance:
            continue

        for adjacent, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[adjacent]:
                distances[adjacent] = distance
                heapq.heappush(queue, [distance, adjacent])

    return distances

def main():
    N, M, K = map(int, input().split())
    graph = {i: {} for i in range(1, N+1)}
    
    for _ in range(M):
        u, v, w = map(int, input().split())
        graph[u][v] = w

    distance_to_school = dijkstra(graph, 1)[K]
    distance_to_work = dijkstra(graph, K)[N]

    print(distance_to_school + distance_to_work)

if __name__ == "__main__":
    main()
