def next_permutation(perm):
    # 1. 뒤에서부터 보며 오름차순이 깨지는 첫 지점을 찾는다.
    i = len(perm) - 1
    while i > 0 and perm[i-1] >= perm[i]:
        i -= 1
    if i <= 0:  # 마지막 순열인 경우
        return perm[::-1]  # 가장 첫 순열로 만들어 반환

    # 2. 뒤에서부터 보며 교환할 큰 수를 찾는다.
    j = len(perm) - 1
    while perm[j] <= perm[i-1]:
        j -= 1
    perm[i-1], perm[j] = perm[j], perm[i-1]

    # 3. i부터 끝까지를 뒤집어 오름차순으로 만든다.
    perm[i:] = perm[len(perm)-1:i-1:-1]
    return perm

def daehee_permutation(N, K, perm):
    # 주어진 순열에서 K번째 다음 순열을 찾는다.
    for _ in range(K):
        perm = next_permutation(perm)
    return perm

# 입력 처리
N, K = map(int, input().split())
perm = list(map(int, input().split()))

# 대희식으로 K번째 다음 순열을 찾는다.
result = daehee_permutation(N, K, perm)

# 결과 출력
print(' '.join(map(str, result)))
