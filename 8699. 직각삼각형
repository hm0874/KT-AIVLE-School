def find_max_pythagorean_triangles(N):
    perimeter_counts = [0] * (N+1)
    result = 0
    max_count = 0

    # m과 n을 사용하여 가능한 모든 피타고라스 삼각형의 둘레를 계산
    for m in range(2, int((N/2)**0.5)+1):
        for n in range(1, m):
            # m과 n이 서로소이고 m - n이 홀수일 때만 직각삼각형 생성
            if (m-n) % 2 == 1 and gcd(m, n) == 1:
                a = m*m - n*n
                b = 2*m*n
                c = m*m + n*n
                perimeter = a + b + c
                if perimeter > N:
                    break
                # 해당 둘레의 모든 배수에 대해 삼각형의 개수 증가
                for k in range(1, N//perimeter + 1):
                    perimeter_counts[perimeter*k] += 1
                    if perimeter_counts[perimeter*k] > max_count:
                        max_count = perimeter_counts[perimeter*k]
                        result = perimeter*k
                    elif perimeter_counts[perimeter*k] == max_count:
                        result = min(result, perimeter*k)  # 같은 수의 삼각형을 생성하는 둘레가 여러 개인 경우, 더 작은 둘레 선택
    return result, max_count

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

N = int(input())
result, max_count = find_max_pythagorean_triangles(N)
print(result, max_count)
